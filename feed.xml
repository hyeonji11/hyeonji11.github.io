<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hyeonji11.github.io/</id><title>현지의 개발새발</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-08-30T19:16:37+08:00</updated> <author> <name>강현지</name> <uri>https://hyeonji11.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hyeonji11.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hyeonji11.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 강현지 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>AOP</title><link href="https://hyeonji11.github.io/posts/AOP/" rel="alternate" type="text/html" title="AOP" /><published>2022-06-22T16:10:00+08:00</published> <updated>2022-06-22T16:10:00+08:00</updated> <id>https://hyeonji11.github.io/posts/AOP/</id> <content src="https://hyeonji11.github.io/posts/AOP/" /> <author> <name>hj</name> </author> <category term="Spring" /> <category term="AOP" /> <summary> AOP AOP란? Aspect Oriented Programming, **관점 지향 프로그래밍 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것. 핵심적인 관점 : 핵심 비즈니스 로직 부가적인 관점 : 데이터베이스 연결, 로깅, 파일 입출력 등 class A { method a() { AAAA method a가 하는 일들 BBBB } method b() { AAAA method b가 하는 일들 BBBB } } class B { method c() { AAAA metho... </summary> </entry> <entry><title>Servlet, Spring MVC</title><link href="https://hyeonji11.github.io/posts/servlet,-Spring-MVC/" rel="alternate" type="text/html" title="Servlet, Spring MVC" /><published>2022-04-03T16:10:00+08:00</published> <updated>2022-04-03T16:10:00+08:00</updated> <id>https://hyeonji11.github.io/posts/servlet,-Spring-MVC/</id> <content src="https://hyeonji11.github.io/posts/servlet,-Spring-MVC/" /> <author> <name>hj</name> </author> <category term="Spring" /> <category term="MVC" /> <summary> 스프링 컨테이너 자바 객체의 생명 주기를 관리하며, 생성된 자바 객체들에게 추가적인 기능을 제공하는 역할 여기서 자바 객체를 스프링에서는 빈(Bean)이라고 부름 IoC 컨테이너에 의해 관리되는 객체를 빈이라고 함 IoC는 종속성 주입(DI)라고도 함 스프링 컨테이너의 종류는 Bean Factory와 이를 상속한 ApplicationContext 2가지가 존재한다. Bean Factory Bean Factory는 스프링 설정파일에 등록된 Bean 객체를 생성하고 관리하는 기본적인 기능만 제공한다. 컨테이너가 구동될 때 Bean 객체를 생성하는 것이 아니라 클라이언트의 요청에 의해서 Bean 객체가 사용되는 시점(Lazy Loading) 에 객체를 생성하는 방식을 사용하고 있다. 일반적으... </summary> </entry> </feed>
